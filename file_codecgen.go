// Code generated by codecgen - DO NOT EDIT.

package xlsx

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF83 = 1
	codecSelferCcRAW3  = 0
	// ----- value types used ----
	codecSelferValueTypeArray3  = 10
	codecSelferValueTypeMap3    = 9
	codecSelferValueTypeString3 = 6
	codecSelferValueTypeInt3    = 2
	codecSelferValueTypeUint3   = 3
	codecSelferValueTypeFloat3  = 4
	codecSelferBitsize3         = uint8(32 << (^uint(0) >> 63))
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct3 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer3 struct{}

func init() {
	if codec1978.GenVersion != 8 {
		_, file, _, _ := runtime.Caller(0)
		panic("codecgen version mismatch: current: 8, need " + strconv.FormatInt(int64(codec1978.GenVersion), 10) + ". Re-generate file: " + file)
	}
	if false { // reference the types, but skip this branch at build/run time
	}
}

func (x *File) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				r.WriteMapStart(4)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.Date1904))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF83, `Date1904`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.Date1904))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Sheets == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoSheet(([]*Sheet)(x.Sheets), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF83, `Sheets`)
				r.WriteMapElemValue()
				if x.Sheets == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoSheet(([]*Sheet)(x.Sheets), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Sheet == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringPtrtoSheet((map[string]*Sheet)(x.Sheet), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF83, `Sheet`)
				r.WriteMapElemValue()
				if x.Sheet == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringPtrtoSheet((map[string]*Sheet)(x.Sheet), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.DefinedNames == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoxlsxDefinedName(([]*xlsxDefinedName)(x.DefinedNames), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF83, `DefinedNames`)
				r.WriteMapElemValue()
				if x.DefinedNames == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoxlsxDefinedName(([]*xlsxDefinedName)(x.DefinedNames), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *File) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap3 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray3 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct3)
		}
	}
}

func (x *File) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Date1904":
			if r.TryDecodeAsNil() {
				x.Date1904 = false
			} else {
				x.Date1904 = (bool)(r.DecodeBool())
			}
		case "Sheets":
			if r.TryDecodeAsNil() {
				x.Sheets = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoSheet((*[]*Sheet)(&x.Sheets), d)
				}
			}
		case "Sheet":
			if r.TryDecodeAsNil() {
				x.Sheet = nil
			} else {
				if false {
				} else {
					h.decMapstringPtrtoSheet((*map[string]*Sheet)(&x.Sheet), d)
				}
			}
		case "DefinedNames":
			if r.TryDecodeAsNil() {
				x.DefinedNames = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoxlsxDefinedName((*[]*xlsxDefinedName)(&x.DefinedNames), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *File) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Date1904 = false
	} else {
		x.Date1904 = (bool)(r.DecodeBool())
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Sheets = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoSheet((*[]*Sheet)(&x.Sheets), d)
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Sheet = nil
	} else {
		if false {
		} else {
			h.decMapstringPtrtoSheet((*map[string]*Sheet)(&x.Sheet), d)
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.DefinedNames = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoxlsxDefinedName((*[]*xlsxDefinedName)(&x.DefinedNames), d)
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer3) encSlicePtrtoSheet(v []*Sheet, e *codec1978.Encoder) {
	var h codecSelfer3
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else if yyxt2 := z.Extension(z.I2Rtid(yyv1)); yyxt2 != nil {
				z.EncExtension(yyv1, yyxt2)
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer3) decSlicePtrtoSheet(v *[]*Sheet, d *codec1978.Decoder) {
	var h codecSelfer3
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Sheet{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Sheet, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*Sheet, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Sheet)
					}
					if false {
					} else if yyxt3 := z.Extension(z.I2Rtid(yyv1[yyj1])); yyxt3 != nil {
						z.DecExtension(yyv1[yyj1], yyxt3)
					} else {
						z.DecFallback(yyv1[yyj1], false)
					}
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*Sheet, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer3) encMapstringPtrtoSheet(v map[string]*Sheet, e *codec1978.Encoder) {
	var h codecSelfer3
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeString(codecSelferCcUTF83, string(yyk1))
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else if yyxt3 := z.Extension(z.I2Rtid(yyv1)); yyxt3 != nil {
				z.EncExtension(yyv1, yyxt3)
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer3) decMapstringPtrtoSheet(v *map[string]*Sheet, d *codec1978.Decoder) {
	var h codecSelfer3
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*Sheet, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *Sheet
	var yymg1, yymdn1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				if yymv1 == nil {
					yymv1 = new(Sheet)
				}
				if false {
				} else if yyxt4 := z.Extension(z.I2Rtid(yymv1)); yyxt4 != nil {
					z.DecExtension(yymv1, yyxt4)
				} else {
					z.DecFallback(yymv1, false)
				}
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer3) encSlicePtrtoxlsxDefinedName(v []*xlsxDefinedName, e *codec1978.Encoder) {
	var h codecSelfer3
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else if yyxt2 := z.Extension(z.I2Rtid(yyv1)); yyxt2 != nil {
				z.EncExtension(yyv1, yyxt2)
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer3) decSlicePtrtoxlsxDefinedName(v *[]*xlsxDefinedName, d *codec1978.Decoder) {
	var h codecSelfer3
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*xlsxDefinedName{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*xlsxDefinedName, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*xlsxDefinedName, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(xlsxDefinedName)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*xlsxDefinedName, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
