// Code generated by codecgen - DO NOT EDIT.

package xlsx

import (
	pkg1_xml "encoding/xml"
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF81 = 1
	codecSelferCcRAW1  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1  = 10
	codecSelferValueTypeMap1    = 9
	codecSelferValueTypeString1 = 6
	codecSelferValueTypeInt1    = 2
	codecSelferValueTypeUint1   = 3
	codecSelferValueTypeFloat1  = 4
	codecSelferBitsize1         = uint8(32 << (^uint(0) >> 63))
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct1 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1 struct{}

func init() {
	if codec1978.GenVersion != 8 {
		_, file, _, _ := runtime.Caller(0)
		panic("codecgen version mismatch: current: 8, need " + strconv.FormatInt(int64(codec1978.GenVersion), 10) + ". Re-generate file: " + file)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg1_xml.Name
		_ = v0
	}
}

func (x *xlsxWorksheet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(13)
			} else {
				r.WriteMapStart(13)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.XMLName
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(yy4)); yyxt5 != nil {
					z.EncExtension(yy4, yyxt5)
				} else {
					z.EncFallback(yy4)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `XMLName`)
				r.WriteMapElemValue()
				yy6 := &x.XMLName
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(yy6)); yyxt7 != nil {
					z.EncExtension(yy6, yyxt7)
				} else {
					z.EncFallback(yy6)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy9 := &x.SheetPr
				yy9.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `SheetPr`)
				r.WriteMapElemValue()
				yy11 := &x.SheetPr
				yy11.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy14 := &x.Dimension
				yy14.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Dimension`)
				r.WriteMapElemValue()
				yy16 := &x.Dimension
				yy16.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy19 := &x.SheetViews
				yy19.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `SheetViews`)
				r.WriteMapElemValue()
				yy21 := &x.SheetViews
				yy21.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy24 := &x.SheetFormatPr
				yy24.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `SheetFormatPr`)
				r.WriteMapElemValue()
				yy26 := &x.SheetFormatPr
				yy26.CodecEncodeSelf(e)
			}
			var yyn28 bool
			if x.Cols == nil {
				yyn28 = true
				goto LABEL28
			}
		LABEL28:
			if yyr2 || yy2arr2 {
				if yyn28 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Cols == nil {
						r.EncodeNil()
					} else {
						x.Cols.CodecEncodeSelf(e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Cols`)
				r.WriteMapElemValue()
				if yyn28 {
					r.EncodeNil()
				} else {
					if x.Cols == nil {
						r.EncodeNil()
					} else {
						x.Cols.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy32 := &x.SheetData
				yy32.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `SheetData`)
				r.WriteMapElemValue()
				yy34 := &x.SheetData
				yy34.CodecEncodeSelf(e)
			}
			var yyn36 bool
			if x.AutoFilter == nil {
				yyn36 = true
				goto LABEL36
			}
		LABEL36:
			if yyr2 || yy2arr2 {
				if yyn36 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.AutoFilter == nil {
						r.EncodeNil()
					} else {
						x.AutoFilter.CodecEncodeSelf(e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `AutoFilter`)
				r.WriteMapElemValue()
				if yyn36 {
					r.EncodeNil()
				} else {
					if x.AutoFilter == nil {
						r.EncodeNil()
					} else {
						x.AutoFilter.CodecEncodeSelf(e)
					}
				}
			}
			var yyn39 bool
			if x.MergeCells == nil {
				yyn39 = true
				goto LABEL39
			}
		LABEL39:
			if yyr2 || yy2arr2 {
				if yyn39 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.MergeCells == nil {
						r.EncodeNil()
					} else {
						x.MergeCells.CodecEncodeSelf(e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `MergeCells`)
				r.WriteMapElemValue()
				if yyn39 {
					r.EncodeNil()
				} else {
					if x.MergeCells == nil {
						r.EncodeNil()
					} else {
						x.MergeCells.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy43 := &x.PrintOptions
				yy43.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `PrintOptions`)
				r.WriteMapElemValue()
				yy45 := &x.PrintOptions
				yy45.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy48 := &x.PageMargins
				yy48.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `PageMargins`)
				r.WriteMapElemValue()
				yy50 := &x.PageMargins
				yy50.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy53 := &x.PageSetUp
				yy53.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `PageSetUp`)
				r.WriteMapElemValue()
				yy55 := &x.PageSetUp
				yy55.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy58 := &x.HeaderFooter
				yy58.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `HeaderFooter`)
				r.WriteMapElemValue()
				yy60 := &x.HeaderFooter
				yy60.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxWorksheet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxWorksheet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "XMLName":
			if r.TryDecodeAsNil() {
				x.XMLName = pkg1_xml.Name{}
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.XMLName)); yyxt5 != nil {
					z.DecExtension(x.XMLName, yyxt5)
				} else {
					z.DecFallback(&x.XMLName, false)
				}
			}
		case "SheetPr":
			if r.TryDecodeAsNil() {
				x.SheetPr = xlsxSheetPr{}
			} else {
				x.SheetPr.CodecDecodeSelf(d)
			}
		case "Dimension":
			if r.TryDecodeAsNil() {
				x.Dimension = xlsxDimension{}
			} else {
				x.Dimension.CodecDecodeSelf(d)
			}
		case "SheetViews":
			if r.TryDecodeAsNil() {
				x.SheetViews = xlsxSheetViews{}
			} else {
				x.SheetViews.CodecDecodeSelf(d)
			}
		case "SheetFormatPr":
			if r.TryDecodeAsNil() {
				x.SheetFormatPr = xlsxSheetFormatPr{}
			} else {
				x.SheetFormatPr.CodecDecodeSelf(d)
			}
		case "Cols":
			if r.TryDecodeAsNil() {
				if true && x.Cols != nil {
					x.Cols = nil
				}
			} else {
				if x.Cols == nil {
					x.Cols = new(xlsxCols)
				}

				x.Cols.CodecDecodeSelf(d)
			}
		case "SheetData":
			if r.TryDecodeAsNil() {
				x.SheetData = xlsxSheetData{}
			} else {
				x.SheetData.CodecDecodeSelf(d)
			}
		case "AutoFilter":
			if r.TryDecodeAsNil() {
				if true && x.AutoFilter != nil {
					x.AutoFilter = nil
				}
			} else {
				if x.AutoFilter == nil {
					x.AutoFilter = new(xlsxAutoFilter)
				}

				x.AutoFilter.CodecDecodeSelf(d)
			}
		case "MergeCells":
			if r.TryDecodeAsNil() {
				if true && x.MergeCells != nil {
					x.MergeCells = nil
				}
			} else {
				if x.MergeCells == nil {
					x.MergeCells = new(xlsxMergeCells)
				}

				x.MergeCells.CodecDecodeSelf(d)
			}
		case "PrintOptions":
			if r.TryDecodeAsNil() {
				x.PrintOptions = xlsxPrintOptions{}
			} else {
				x.PrintOptions.CodecDecodeSelf(d)
			}
		case "PageMargins":
			if r.TryDecodeAsNil() {
				x.PageMargins = xlsxPageMargins{}
			} else {
				x.PageMargins.CodecDecodeSelf(d)
			}
		case "PageSetUp":
			if r.TryDecodeAsNil() {
				x.PageSetUp = xlsxPageSetUp{}
			} else {
				x.PageSetUp.CodecDecodeSelf(d)
			}
		case "HeaderFooter":
			if r.TryDecodeAsNil() {
				x.HeaderFooter = xlsxHeaderFooter{}
			} else {
				x.HeaderFooter.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxWorksheet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.XMLName = pkg1_xml.Name{}
	} else {
		if false {
		} else if yyxt20 := z.Extension(z.I2Rtid(x.XMLName)); yyxt20 != nil {
			z.DecExtension(x.XMLName, yyxt20)
		} else {
			z.DecFallback(&x.XMLName, false)
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.SheetPr = xlsxSheetPr{}
	} else {
		x.SheetPr.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Dimension = xlsxDimension{}
	} else {
		x.Dimension.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.SheetViews = xlsxSheetViews{}
	} else {
		x.SheetViews.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.SheetFormatPr = xlsxSheetFormatPr{}
	} else {
		x.SheetFormatPr.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Cols != nil {
			x.Cols = nil
		}
	} else {
		if x.Cols == nil {
			x.Cols = new(xlsxCols)
		}

		x.Cols.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.SheetData = xlsxSheetData{}
	} else {
		x.SheetData.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.AutoFilter != nil {
			x.AutoFilter = nil
		}
	} else {
		if x.AutoFilter == nil {
			x.AutoFilter = new(xlsxAutoFilter)
		}

		x.AutoFilter.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.MergeCells != nil {
			x.MergeCells = nil
		}
	} else {
		if x.MergeCells == nil {
			x.MergeCells = new(xlsxMergeCells)
		}

		x.MergeCells.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PrintOptions = xlsxPrintOptions{}
	} else {
		x.PrintOptions.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PageMargins = xlsxPageMargins{}
	} else {
		x.PageMargins.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PageSetUp = xlsxPageSetUp{}
	} else {
		x.PageSetUp.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.HeaderFooter = xlsxHeaderFooter{}
	} else {
		x.HeaderFooter.CodecDecodeSelf(d)
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxHeaderFooter) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				r.WriteMapStart(4)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.DifferentFirst))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `DifferentFirst`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.DifferentFirst))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.DifferentOddEven))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `DifferentOddEven`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.DifferentOddEven))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.OddHeader == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxOddHeader(([]xlsxOddHeader)(x.OddHeader), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `OddHeader`)
				r.WriteMapElemValue()
				if x.OddHeader == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxOddHeader(([]xlsxOddHeader)(x.OddHeader), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.OddFooter == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxOddFooter(([]xlsxOddFooter)(x.OddFooter), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `OddFooter`)
				r.WriteMapElemValue()
				if x.OddFooter == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxOddFooter(([]xlsxOddFooter)(x.OddFooter), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxHeaderFooter) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxHeaderFooter) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "DifferentFirst":
			if r.TryDecodeAsNil() {
				x.DifferentFirst = false
			} else {
				x.DifferentFirst = (bool)(r.DecodeBool())
			}
		case "DifferentOddEven":
			if r.TryDecodeAsNil() {
				x.DifferentOddEven = false
			} else {
				x.DifferentOddEven = (bool)(r.DecodeBool())
			}
		case "OddHeader":
			if r.TryDecodeAsNil() {
				x.OddHeader = nil
			} else {
				if false {
				} else {
					h.decSlicexlsxOddHeader((*[]xlsxOddHeader)(&x.OddHeader), d)
				}
			}
		case "OddFooter":
			if r.TryDecodeAsNil() {
				x.OddFooter = nil
			} else {
				if false {
				} else {
					h.decSlicexlsxOddFooter((*[]xlsxOddFooter)(&x.OddFooter), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxHeaderFooter) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.DifferentFirst = false
	} else {
		x.DifferentFirst = (bool)(r.DecodeBool())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.DifferentOddEven = false
	} else {
		x.DifferentOddEven = (bool)(r.DecodeBool())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.OddHeader = nil
	} else {
		if false {
		} else {
			h.decSlicexlsxOddHeader((*[]xlsxOddHeader)(&x.OddHeader), d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.OddFooter = nil
	} else {
		if false {
		} else {
			h.decSlicexlsxOddFooter((*[]xlsxOddFooter)(&x.OddFooter), d)
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxOddHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Content))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Content`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Content))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxOddHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxOddHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Content":
			if r.TryDecodeAsNil() {
				x.Content = ""
			} else {
				x.Content = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxOddHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = r.CheckBreak()
	}
	if yyb5 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Content = ""
	} else {
		x.Content = (string)(r.DecodeString())
	}
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = r.CheckBreak()
		}
		if yyb5 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxOddFooter) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Content))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Content`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Content))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxOddFooter) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxOddFooter) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Content":
			if r.TryDecodeAsNil() {
				x.Content = ""
			} else {
				x.Content = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxOddFooter) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = r.CheckBreak()
	}
	if yyb5 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Content = ""
	} else {
		x.Content = (string)(r.DecodeString())
	}
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = r.CheckBreak()
		}
		if yyb5 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxPageSetUp) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(15)
			} else {
				r.WriteMapStart(15)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.PaperSize))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `PaperSize`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.PaperSize))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Scale))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Scale`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Scale))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.FirstPageNumber))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `FirstPageNumber`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.FirstPageNumber))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.FitToWidth))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `FitToWidth`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.FitToWidth))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.FitToHeight))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `FitToHeight`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.FitToHeight))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.PageOrder))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `PageOrder`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.PageOrder))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Orientation))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Orientation`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Orientation))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.UsePrinterDefaults))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `UsePrinterDefaults`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.UsePrinterDefaults))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.BlackAndWhite))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `BlackAndWhite`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.BlackAndWhite))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.Draft))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Draft`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.Draft))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.CellComments))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `CellComments`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.CellComments))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.UseFirstPageNumber))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `UseFirstPageNumber`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.UseFirstPageNumber))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat32(float32(x.HorizontalDPI))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `HorizontalDPI`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat32(float32(x.HorizontalDPI))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat32(float32(x.VerticalDPI))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `VerticalDPI`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat32(float32(x.VerticalDPI))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Copies))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Copies`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Copies))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxPageSetUp) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxPageSetUp) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "PaperSize":
			if r.TryDecodeAsNil() {
				x.PaperSize = ""
			} else {
				x.PaperSize = (string)(r.DecodeString())
			}
		case "Scale":
			if r.TryDecodeAsNil() {
				x.Scale = 0
			} else {
				x.Scale = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
			}
		case "FirstPageNumber":
			if r.TryDecodeAsNil() {
				x.FirstPageNumber = 0
			} else {
				x.FirstPageNumber = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
			}
		case "FitToWidth":
			if r.TryDecodeAsNil() {
				x.FitToWidth = 0
			} else {
				x.FitToWidth = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
			}
		case "FitToHeight":
			if r.TryDecodeAsNil() {
				x.FitToHeight = 0
			} else {
				x.FitToHeight = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
			}
		case "PageOrder":
			if r.TryDecodeAsNil() {
				x.PageOrder = ""
			} else {
				x.PageOrder = (string)(r.DecodeString())
			}
		case "Orientation":
			if r.TryDecodeAsNil() {
				x.Orientation = ""
			} else {
				x.Orientation = (string)(r.DecodeString())
			}
		case "UsePrinterDefaults":
			if r.TryDecodeAsNil() {
				x.UsePrinterDefaults = false
			} else {
				x.UsePrinterDefaults = (bool)(r.DecodeBool())
			}
		case "BlackAndWhite":
			if r.TryDecodeAsNil() {
				x.BlackAndWhite = false
			} else {
				x.BlackAndWhite = (bool)(r.DecodeBool())
			}
		case "Draft":
			if r.TryDecodeAsNil() {
				x.Draft = false
			} else {
				x.Draft = (bool)(r.DecodeBool())
			}
		case "CellComments":
			if r.TryDecodeAsNil() {
				x.CellComments = ""
			} else {
				x.CellComments = (string)(r.DecodeString())
			}
		case "UseFirstPageNumber":
			if r.TryDecodeAsNil() {
				x.UseFirstPageNumber = false
			} else {
				x.UseFirstPageNumber = (bool)(r.DecodeBool())
			}
		case "HorizontalDPI":
			if r.TryDecodeAsNil() {
				x.HorizontalDPI = 0
			} else {
				x.HorizontalDPI = (float32)(r.DecodeFloat32As64())
			}
		case "VerticalDPI":
			if r.TryDecodeAsNil() {
				x.VerticalDPI = 0
			} else {
				x.VerticalDPI = (float32)(r.DecodeFloat32As64())
			}
		case "Copies":
			if r.TryDecodeAsNil() {
				x.Copies = 0
			} else {
				x.Copies = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxPageSetUp) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj19 int
	var yyb19 bool
	var yyhl19 bool = l >= 0
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PaperSize = ""
	} else {
		x.PaperSize = (string)(r.DecodeString())
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Scale = 0
	} else {
		x.Scale = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FirstPageNumber = 0
	} else {
		x.FirstPageNumber = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FitToWidth = 0
	} else {
		x.FitToWidth = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FitToHeight = 0
	} else {
		x.FitToHeight = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PageOrder = ""
	} else {
		x.PageOrder = (string)(r.DecodeString())
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Orientation = ""
	} else {
		x.Orientation = (string)(r.DecodeString())
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.UsePrinterDefaults = false
	} else {
		x.UsePrinterDefaults = (bool)(r.DecodeBool())
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.BlackAndWhite = false
	} else {
		x.BlackAndWhite = (bool)(r.DecodeBool())
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Draft = false
	} else {
		x.Draft = (bool)(r.DecodeBool())
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.CellComments = ""
	} else {
		x.CellComments = (string)(r.DecodeString())
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.UseFirstPageNumber = false
	} else {
		x.UseFirstPageNumber = (bool)(r.DecodeBool())
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.HorizontalDPI = 0
	} else {
		x.HorizontalDPI = (float32)(r.DecodeFloat32As64())
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.VerticalDPI = 0
	} else {
		x.VerticalDPI = (float32)(r.DecodeFloat32As64())
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Copies = 0
	} else {
		x.Copies = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
	}
	for {
		yyj19++
		if yyhl19 {
			yyb19 = yyj19 > l
		} else {
			yyb19 = r.CheckBreak()
		}
		if yyb19 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj19-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxPrintOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				r.WriteMapStart(5)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.Headings))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Headings`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.Headings))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.GridLines))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `GridLines`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.GridLines))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.GridLinesSet))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `GridLinesSet`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.GridLinesSet))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.HorizontalCentered))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `HorizontalCentered`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.HorizontalCentered))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.VerticalCentered))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `VerticalCentered`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.VerticalCentered))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxPrintOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxPrintOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Headings":
			if r.TryDecodeAsNil() {
				x.Headings = false
			} else {
				x.Headings = (bool)(r.DecodeBool())
			}
		case "GridLines":
			if r.TryDecodeAsNil() {
				x.GridLines = false
			} else {
				x.GridLines = (bool)(r.DecodeBool())
			}
		case "GridLinesSet":
			if r.TryDecodeAsNil() {
				x.GridLinesSet = false
			} else {
				x.GridLinesSet = (bool)(r.DecodeBool())
			}
		case "HorizontalCentered":
			if r.TryDecodeAsNil() {
				x.HorizontalCentered = false
			} else {
				x.HorizontalCentered = (bool)(r.DecodeBool())
			}
		case "VerticalCentered":
			if r.TryDecodeAsNil() {
				x.VerticalCentered = false
			} else {
				x.VerticalCentered = (bool)(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxPrintOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Headings = false
	} else {
		x.Headings = (bool)(r.DecodeBool())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.GridLines = false
	} else {
		x.GridLines = (bool)(r.DecodeBool())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.GridLinesSet = false
	} else {
		x.GridLinesSet = (bool)(r.DecodeBool())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.HorizontalCentered = false
	} else {
		x.HorizontalCentered = (bool)(r.DecodeBool())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.VerticalCentered = false
	} else {
		x.VerticalCentered = (bool)(r.DecodeBool())
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxPageMargins) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(6)
			} else {
				r.WriteMapStart(6)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Left))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Left`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Left))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Right))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Right`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Right))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Top))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Top`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Top))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Bottom))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Bottom`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Bottom))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Header))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Header`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Header))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Footer))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Footer`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Footer))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxPageMargins) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxPageMargins) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Left":
			if r.TryDecodeAsNil() {
				x.Left = 0
			} else {
				x.Left = (float64)(r.DecodeFloat64())
			}
		case "Right":
			if r.TryDecodeAsNil() {
				x.Right = 0
			} else {
				x.Right = (float64)(r.DecodeFloat64())
			}
		case "Top":
			if r.TryDecodeAsNil() {
				x.Top = 0
			} else {
				x.Top = (float64)(r.DecodeFloat64())
			}
		case "Bottom":
			if r.TryDecodeAsNil() {
				x.Bottom = 0
			} else {
				x.Bottom = (float64)(r.DecodeFloat64())
			}
		case "Header":
			if r.TryDecodeAsNil() {
				x.Header = 0
			} else {
				x.Header = (float64)(r.DecodeFloat64())
			}
		case "Footer":
			if r.TryDecodeAsNil() {
				x.Footer = 0
			} else {
				x.Footer = (float64)(r.DecodeFloat64())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxPageMargins) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Left = 0
	} else {
		x.Left = (float64)(r.DecodeFloat64())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Right = 0
	} else {
		x.Right = (float64)(r.DecodeFloat64())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Top = 0
	} else {
		x.Top = (float64)(r.DecodeFloat64())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Bottom = 0
	} else {
		x.Bottom = (float64)(r.DecodeFloat64())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header = 0
	} else {
		x.Header = (float64)(r.DecodeFloat64())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Footer = 0
	} else {
		x.Footer = (float64)(r.DecodeFloat64())
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxSheetFormatPr) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				r.WriteMapStart(4)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat64(float64(x.DefaultColWidth))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `DefaultColWidth`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat64(float64(x.DefaultColWidth))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat64(float64(x.DefaultRowHeight))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `DefaultRowHeight`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat64(float64(x.DefaultRowHeight))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.OutlineLevelCol))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `OutlineLevelCol`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.OutlineLevelCol))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.OutlineLevelRow))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `OutlineLevelRow`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.OutlineLevelRow))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxSheetFormatPr) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxSheetFormatPr) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "DefaultColWidth":
			if r.TryDecodeAsNil() {
				x.DefaultColWidth = 0
			} else {
				x.DefaultColWidth = (float64)(r.DecodeFloat64())
			}
		case "DefaultRowHeight":
			if r.TryDecodeAsNil() {
				x.DefaultRowHeight = 0
			} else {
				x.DefaultRowHeight = (float64)(r.DecodeFloat64())
			}
		case "OutlineLevelCol":
			if r.TryDecodeAsNil() {
				x.OutlineLevelCol = 0
			} else {
				x.OutlineLevelCol = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}
		case "OutlineLevelRow":
			if r.TryDecodeAsNil() {
				x.OutlineLevelRow = 0
			} else {
				x.OutlineLevelRow = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxSheetFormatPr) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.DefaultColWidth = 0
	} else {
		x.DefaultColWidth = (float64)(r.DecodeFloat64())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.DefaultRowHeight = 0
	} else {
		x.DefaultRowHeight = (float64)(r.DecodeFloat64())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.OutlineLevelCol = 0
	} else {
		x.OutlineLevelCol = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.OutlineLevelRow = 0
	} else {
		x.OutlineLevelRow = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxSheetViews) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.SheetView == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxSheetView(([]xlsxSheetView)(x.SheetView), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `SheetView`)
				r.WriteMapElemValue()
				if x.SheetView == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxSheetView(([]xlsxSheetView)(x.SheetView), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxSheetViews) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxSheetViews) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "SheetView":
			if r.TryDecodeAsNil() {
				x.SheetView = nil
			} else {
				if false {
				} else {
					h.decSlicexlsxSheetView((*[]xlsxSheetView)(&x.SheetView), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxSheetViews) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.SheetView = nil
	} else {
		if false {
		} else {
			h.decSlicexlsxSheetView((*[]xlsxSheetView)(&x.SheetView), d)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxSheetView) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(18)
			} else {
				r.WriteMapStart(18)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.WindowProtection))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `WindowProtection`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.WindowProtection))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.ShowFormulas))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `ShowFormulas`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.ShowFormulas))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.ShowGridLines))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `ShowGridLines`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.ShowGridLines))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.ShowRowColHeaders))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `ShowRowColHeaders`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.ShowRowColHeaders))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.ShowZeros))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `ShowZeros`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.ShowZeros))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.RightToLeft))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `RightToLeft`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.RightToLeft))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.TabSelected))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `TabSelected`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.TabSelected))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.ShowOutlineSymbols))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `ShowOutlineSymbols`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.ShowOutlineSymbols))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.DefaultGridColor))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `DefaultGridColor`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.DefaultGridColor))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.View))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `View`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.View))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.TopLeftCell))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `TopLeftCell`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.TopLeftCell))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.ColorId))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `ColorId`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.ColorId))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat64(float64(x.ZoomScale))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `ZoomScale`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat64(float64(x.ZoomScale))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat64(float64(x.ZoomScaleNormal))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `ZoomScaleNormal`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat64(float64(x.ZoomScaleNormal))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat64(float64(x.ZoomScalePageLayoutView))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `ZoomScalePageLayoutView`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat64(float64(x.ZoomScalePageLayoutView))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.WorkbookViewId))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `WorkbookViewId`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.WorkbookViewId))
				}
			}
			var yyn51 bool
			if x.Pane == nil {
				yyn51 = true
				goto LABEL51
			}
		LABEL51:
			if yyr2 || yy2arr2 {
				if yyn51 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Pane == nil {
						r.EncodeNil()
					} else {
						x.Pane.CodecEncodeSelf(e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Pane`)
				r.WriteMapElemValue()
				if yyn51 {
					r.EncodeNil()
				} else {
					if x.Pane == nil {
						r.EncodeNil()
					} else {
						x.Pane.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Selection == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxSelection(([]xlsxSelection)(x.Selection), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Selection`)
				r.WriteMapElemValue()
				if x.Selection == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxSelection(([]xlsxSelection)(x.Selection), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxSheetView) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxSheetView) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "WindowProtection":
			if r.TryDecodeAsNil() {
				x.WindowProtection = false
			} else {
				x.WindowProtection = (bool)(r.DecodeBool())
			}
		case "ShowFormulas":
			if r.TryDecodeAsNil() {
				x.ShowFormulas = false
			} else {
				x.ShowFormulas = (bool)(r.DecodeBool())
			}
		case "ShowGridLines":
			if r.TryDecodeAsNil() {
				x.ShowGridLines = false
			} else {
				x.ShowGridLines = (bool)(r.DecodeBool())
			}
		case "ShowRowColHeaders":
			if r.TryDecodeAsNil() {
				x.ShowRowColHeaders = false
			} else {
				x.ShowRowColHeaders = (bool)(r.DecodeBool())
			}
		case "ShowZeros":
			if r.TryDecodeAsNil() {
				x.ShowZeros = false
			} else {
				x.ShowZeros = (bool)(r.DecodeBool())
			}
		case "RightToLeft":
			if r.TryDecodeAsNil() {
				x.RightToLeft = false
			} else {
				x.RightToLeft = (bool)(r.DecodeBool())
			}
		case "TabSelected":
			if r.TryDecodeAsNil() {
				x.TabSelected = false
			} else {
				x.TabSelected = (bool)(r.DecodeBool())
			}
		case "ShowOutlineSymbols":
			if r.TryDecodeAsNil() {
				x.ShowOutlineSymbols = false
			} else {
				x.ShowOutlineSymbols = (bool)(r.DecodeBool())
			}
		case "DefaultGridColor":
			if r.TryDecodeAsNil() {
				x.DefaultGridColor = false
			} else {
				x.DefaultGridColor = (bool)(r.DecodeBool())
			}
		case "View":
			if r.TryDecodeAsNil() {
				x.View = ""
			} else {
				x.View = (string)(r.DecodeString())
			}
		case "TopLeftCell":
			if r.TryDecodeAsNil() {
				x.TopLeftCell = ""
			} else {
				x.TopLeftCell = (string)(r.DecodeString())
			}
		case "ColorId":
			if r.TryDecodeAsNil() {
				x.ColorId = 0
			} else {
				x.ColorId = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
			}
		case "ZoomScale":
			if r.TryDecodeAsNil() {
				x.ZoomScale = 0
			} else {
				x.ZoomScale = (float64)(r.DecodeFloat64())
			}
		case "ZoomScaleNormal":
			if r.TryDecodeAsNil() {
				x.ZoomScaleNormal = 0
			} else {
				x.ZoomScaleNormal = (float64)(r.DecodeFloat64())
			}
		case "ZoomScalePageLayoutView":
			if r.TryDecodeAsNil() {
				x.ZoomScalePageLayoutView = 0
			} else {
				x.ZoomScalePageLayoutView = (float64)(r.DecodeFloat64())
			}
		case "WorkbookViewId":
			if r.TryDecodeAsNil() {
				x.WorkbookViewId = 0
			} else {
				x.WorkbookViewId = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
			}
		case "Pane":
			if r.TryDecodeAsNil() {
				if true && x.Pane != nil {
					x.Pane = nil
				}
			} else {
				if x.Pane == nil {
					x.Pane = new(xlsxPane)
				}

				x.Pane.CodecDecodeSelf(d)
			}
		case "Selection":
			if r.TryDecodeAsNil() {
				x.Selection = nil
			} else {
				if false {
				} else {
					h.decSlicexlsxSelection((*[]xlsxSelection)(&x.Selection), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxSheetView) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj23 int
	var yyb23 bool
	var yyhl23 bool = l >= 0
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.WindowProtection = false
	} else {
		x.WindowProtection = (bool)(r.DecodeBool())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ShowFormulas = false
	} else {
		x.ShowFormulas = (bool)(r.DecodeBool())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ShowGridLines = false
	} else {
		x.ShowGridLines = (bool)(r.DecodeBool())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ShowRowColHeaders = false
	} else {
		x.ShowRowColHeaders = (bool)(r.DecodeBool())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ShowZeros = false
	} else {
		x.ShowZeros = (bool)(r.DecodeBool())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.RightToLeft = false
	} else {
		x.RightToLeft = (bool)(r.DecodeBool())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TabSelected = false
	} else {
		x.TabSelected = (bool)(r.DecodeBool())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ShowOutlineSymbols = false
	} else {
		x.ShowOutlineSymbols = (bool)(r.DecodeBool())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.DefaultGridColor = false
	} else {
		x.DefaultGridColor = (bool)(r.DecodeBool())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.View = ""
	} else {
		x.View = (string)(r.DecodeString())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TopLeftCell = ""
	} else {
		x.TopLeftCell = (string)(r.DecodeString())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ColorId = 0
	} else {
		x.ColorId = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ZoomScale = 0
	} else {
		x.ZoomScale = (float64)(r.DecodeFloat64())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ZoomScaleNormal = 0
	} else {
		x.ZoomScaleNormal = (float64)(r.DecodeFloat64())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ZoomScalePageLayoutView = 0
	} else {
		x.ZoomScalePageLayoutView = (float64)(r.DecodeFloat64())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.WorkbookViewId = 0
	} else {
		x.WorkbookViewId = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Pane != nil {
			x.Pane = nil
		}
	} else {
		if x.Pane == nil {
			x.Pane = new(xlsxPane)
		}

		x.Pane.CodecDecodeSelf(d)
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Selection = nil
	} else {
		if false {
		} else {
			h.decSlicexlsxSelection((*[]xlsxSelection)(&x.Selection), d)
		}
	}
	for {
		yyj23++
		if yyhl23 {
			yyb23 = yyj23 > l
		} else {
			yyb23 = r.CheckBreak()
		}
		if yyb23 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj23-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxSelection) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				r.WriteMapStart(4)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Pane))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Pane`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Pane))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.ActiveCell))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `ActiveCell`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.ActiveCell))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.ActiveCellId))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `ActiveCellId`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.ActiveCellId))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.SQRef))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `SQRef`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.SQRef))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxSelection) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxSelection) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Pane":
			if r.TryDecodeAsNil() {
				x.Pane = ""
			} else {
				x.Pane = (string)(r.DecodeString())
			}
		case "ActiveCell":
			if r.TryDecodeAsNil() {
				x.ActiveCell = ""
			} else {
				x.ActiveCell = (string)(r.DecodeString())
			}
		case "ActiveCellId":
			if r.TryDecodeAsNil() {
				x.ActiveCellId = 0
			} else {
				x.ActiveCellId = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
			}
		case "SQRef":
			if r.TryDecodeAsNil() {
				x.SQRef = ""
			} else {
				x.SQRef = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxSelection) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Pane = ""
	} else {
		x.Pane = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ActiveCell = ""
	} else {
		x.ActiveCell = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ActiveCellId = 0
	} else {
		x.ActiveCellId = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.SQRef = ""
	} else {
		x.SQRef = (string)(r.DecodeString())
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxPane) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				r.WriteMapStart(5)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat64(float64(x.XSplit))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `XSplit`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat64(float64(x.XSplit))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat64(float64(x.YSplit))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `YSplit`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat64(float64(x.YSplit))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.TopLeftCell))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `TopLeftCell`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.TopLeftCell))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.ActivePane))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `ActivePane`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.ActivePane))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.State))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `State`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.State))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxPane) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxPane) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "XSplit":
			if r.TryDecodeAsNil() {
				x.XSplit = 0
			} else {
				x.XSplit = (float64)(r.DecodeFloat64())
			}
		case "YSplit":
			if r.TryDecodeAsNil() {
				x.YSplit = 0
			} else {
				x.YSplit = (float64)(r.DecodeFloat64())
			}
		case "TopLeftCell":
			if r.TryDecodeAsNil() {
				x.TopLeftCell = ""
			} else {
				x.TopLeftCell = (string)(r.DecodeString())
			}
		case "ActivePane":
			if r.TryDecodeAsNil() {
				x.ActivePane = ""
			} else {
				x.ActivePane = (string)(r.DecodeString())
			}
		case "State":
			if r.TryDecodeAsNil() {
				x.State = ""
			} else {
				x.State = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxPane) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.XSplit = 0
	} else {
		x.XSplit = (float64)(r.DecodeFloat64())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.YSplit = 0
	} else {
		x.YSplit = (float64)(r.DecodeFloat64())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TopLeftCell = ""
	} else {
		x.TopLeftCell = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ActivePane = ""
	} else {
		x.ActivePane = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.State = ""
	} else {
		x.State = (string)(r.DecodeString())
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxSheetPr) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				r.WriteMapStart(2)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.FilterMode))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `FilterMode`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.FilterMode))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.PageSetUpPr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxPageSetUpPr(([]xlsxPageSetUpPr)(x.PageSetUpPr), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `PageSetUpPr`)
				r.WriteMapElemValue()
				if x.PageSetUpPr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxPageSetUpPr(([]xlsxPageSetUpPr)(x.PageSetUpPr), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxSheetPr) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxSheetPr) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "FilterMode":
			if r.TryDecodeAsNil() {
				x.FilterMode = false
			} else {
				x.FilterMode = (bool)(r.DecodeBool())
			}
		case "PageSetUpPr":
			if r.TryDecodeAsNil() {
				x.PageSetUpPr = nil
			} else {
				if false {
				} else {
					h.decSlicexlsxPageSetUpPr((*[]xlsxPageSetUpPr)(&x.PageSetUpPr), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxSheetPr) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FilterMode = false
	} else {
		x.FilterMode = (bool)(r.DecodeBool())
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PageSetUpPr = nil
	} else {
		if false {
		} else {
			h.decSlicexlsxPageSetUpPr((*[]xlsxPageSetUpPr)(&x.PageSetUpPr), d)
		}
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxPageSetUpPr) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.FitToPage))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `FitToPage`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.FitToPage))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxPageSetUpPr) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxPageSetUpPr) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "FitToPage":
			if r.TryDecodeAsNil() {
				x.FitToPage = false
			} else {
				x.FitToPage = (bool)(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxPageSetUpPr) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = r.CheckBreak()
	}
	if yyb5 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FitToPage = false
	} else {
		x.FitToPage = (bool)(r.DecodeBool())
	}
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = r.CheckBreak()
		}
		if yyb5 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxCols) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Col == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxCol(([]xlsxCol)(x.Col), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Col`)
				r.WriteMapElemValue()
				if x.Col == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxCol(([]xlsxCol)(x.Col), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxCols) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxCols) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Col":
			if r.TryDecodeAsNil() {
				x.Col = nil
			} else {
				if false {
				} else {
					h.decSlicexlsxCol((*[]xlsxCol)(&x.Col), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxCols) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Col = nil
	} else {
		if false {
		} else {
			h.decSlicexlsxCol((*[]xlsxCol)(&x.Col), d)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxCol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(8)
			} else {
				r.WriteMapStart(8)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.Collapsed))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Collapsed`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.Collapsed))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.Hidden))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Hidden`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.Hidden))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Max`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Min`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Style))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Style`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Style))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Width))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Width`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Width))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.CustomWidth))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `CustomWidth`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.CustomWidth))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.OutlineLevel))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `OutlineLevel`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.OutlineLevel))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxCol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxCol) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Collapsed":
			if r.TryDecodeAsNil() {
				x.Collapsed = false
			} else {
				x.Collapsed = (bool)(r.DecodeBool())
			}
		case "Hidden":
			if r.TryDecodeAsNil() {
				x.Hidden = false
			} else {
				x.Hidden = (bool)(r.DecodeBool())
			}
		case "Max":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				x.Max = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
			}
		case "Min":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				x.Min = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
			}
		case "Style":
			if r.TryDecodeAsNil() {
				x.Style = 0
			} else {
				x.Style = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
			}
		case "Width":
			if r.TryDecodeAsNil() {
				x.Width = 0
			} else {
				x.Width = (float64)(r.DecodeFloat64())
			}
		case "CustomWidth":
			if r.TryDecodeAsNil() {
				x.CustomWidth = false
			} else {
				x.CustomWidth = (bool)(r.DecodeBool())
			}
		case "OutlineLevel":
			if r.TryDecodeAsNil() {
				x.OutlineLevel = 0
			} else {
				x.OutlineLevel = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxCol) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Collapsed = false
	} else {
		x.Collapsed = (bool)(r.DecodeBool())
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Hidden = false
	} else {
		x.Hidden = (bool)(r.DecodeBool())
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		x.Max = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		x.Min = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Style = 0
	} else {
		x.Style = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Width = 0
	} else {
		x.Width = (float64)(r.DecodeFloat64())
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.CustomWidth = false
	} else {
		x.CustomWidth = (bool)(r.DecodeBool())
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.OutlineLevel = 0
	} else {
		x.OutlineLevel = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxDimension) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Ref))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Ref`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Ref))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxDimension) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxDimension) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Ref":
			if r.TryDecodeAsNil() {
				x.Ref = ""
			} else {
				x.Ref = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxDimension) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = r.CheckBreak()
	}
	if yyb5 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Ref = ""
	} else {
		x.Ref = (string)(r.DecodeString())
	}
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = r.CheckBreak()
		}
		if yyb5 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxSheetData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				r.WriteMapStart(2)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.XMLName
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(yy4)); yyxt5 != nil {
					z.EncExtension(yy4, yyxt5)
				} else {
					z.EncFallback(yy4)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `XMLName`)
				r.WriteMapElemValue()
				yy6 := &x.XMLName
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(yy6)); yyxt7 != nil {
					z.EncExtension(yy6, yyxt7)
				} else {
					z.EncFallback(yy6)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Row == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxRow(([]xlsxRow)(x.Row), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Row`)
				r.WriteMapElemValue()
				if x.Row == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxRow(([]xlsxRow)(x.Row), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxSheetData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxSheetData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "XMLName":
			if r.TryDecodeAsNil() {
				x.XMLName = pkg1_xml.Name{}
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.XMLName)); yyxt5 != nil {
					z.DecExtension(x.XMLName, yyxt5)
				} else {
					z.DecFallback(&x.XMLName, false)
				}
			}
		case "Row":
			if r.TryDecodeAsNil() {
				x.Row = nil
			} else {
				if false {
				} else {
					h.decSlicexlsxRow((*[]xlsxRow)(&x.Row), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxSheetData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.XMLName = pkg1_xml.Name{}
	} else {
		if false {
		} else if yyxt10 := z.Extension(z.I2Rtid(x.XMLName)); yyxt10 != nil {
			z.DecExtension(x.XMLName, yyxt10)
		} else {
			z.DecFallback(&x.XMLName, false)
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Row = nil
	} else {
		if false {
		} else {
			h.decSlicexlsxRow((*[]xlsxRow)(&x.Row), d)
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxRow) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(7)
			} else {
				r.WriteMapStart(7)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.R))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `R`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.R))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Spans))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Spans`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Spans))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.Hidden))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Hidden`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.Hidden))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.C == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxC(([]xlsxC)(x.C), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `C`)
				r.WriteMapElemValue()
				if x.C == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxC(([]xlsxC)(x.C), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Ht))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Ht`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Ht))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.CustomHeight))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `CustomHeight`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.CustomHeight))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.OutlineLevel))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `OutlineLevel`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.OutlineLevel))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxRow) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxRow) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "R":
			if r.TryDecodeAsNil() {
				x.R = 0
			} else {
				x.R = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
			}
		case "Spans":
			if r.TryDecodeAsNil() {
				x.Spans = ""
			} else {
				x.Spans = (string)(r.DecodeString())
			}
		case "Hidden":
			if r.TryDecodeAsNil() {
				x.Hidden = false
			} else {
				x.Hidden = (bool)(r.DecodeBool())
			}
		case "C":
			if r.TryDecodeAsNil() {
				x.C = nil
			} else {
				if false {
				} else {
					h.decSlicexlsxC((*[]xlsxC)(&x.C), d)
				}
			}
		case "Ht":
			if r.TryDecodeAsNil() {
				x.Ht = ""
			} else {
				x.Ht = (string)(r.DecodeString())
			}
		case "CustomHeight":
			if r.TryDecodeAsNil() {
				x.CustomHeight = false
			} else {
				x.CustomHeight = (bool)(r.DecodeBool())
			}
		case "OutlineLevel":
			if r.TryDecodeAsNil() {
				x.OutlineLevel = 0
			} else {
				x.OutlineLevel = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxRow) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.R = 0
	} else {
		x.R = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Spans = ""
	} else {
		x.Spans = (string)(r.DecodeString())
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Hidden = false
	} else {
		x.Hidden = (bool)(r.DecodeBool())
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.C = nil
	} else {
		if false {
		} else {
			h.decSlicexlsxC((*[]xlsxC)(&x.C), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Ht = ""
	} else {
		x.Ht = (string)(r.DecodeString())
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.CustomHeight = false
	} else {
		x.CustomHeight = (bool)(r.DecodeBool())
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.OutlineLevel = 0
	} else {
		x.OutlineLevel = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxAutoFilter) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Ref))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Ref`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Ref))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxAutoFilter) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxAutoFilter) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Ref":
			if r.TryDecodeAsNil() {
				x.Ref = ""
			} else {
				x.Ref = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxAutoFilter) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = r.CheckBreak()
	}
	if yyb5 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Ref = ""
	} else {
		x.Ref = (string)(r.DecodeString())
	}
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = r.CheckBreak()
		}
		if yyb5 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxMergeCell) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Ref))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Ref`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Ref))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxMergeCell) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxMergeCell) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Ref":
			if r.TryDecodeAsNil() {
				x.Ref = ""
			} else {
				x.Ref = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxMergeCell) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = r.CheckBreak()
	}
	if yyb5 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Ref = ""
	} else {
		x.Ref = (string)(r.DecodeString())
	}
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = r.CheckBreak()
		}
		if yyb5 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxMergeCells) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				r.WriteMapStart(3)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.XMLName
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(yy4)); yyxt5 != nil {
					z.EncExtension(yy4, yyxt5)
				} else {
					z.EncFallback(yy4)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `XMLName`)
				r.WriteMapElemValue()
				yy6 := &x.XMLName
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(yy6)); yyxt7 != nil {
					z.EncExtension(yy6, yyxt7)
				} else {
					z.EncFallback(yy6)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Count))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Count`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Count))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Cells == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxMergeCell(([]xlsxMergeCell)(x.Cells), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Cells`)
				r.WriteMapElemValue()
				if x.Cells == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxMergeCell(([]xlsxMergeCell)(x.Cells), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxMergeCells) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxMergeCells) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "XMLName":
			if r.TryDecodeAsNil() {
				x.XMLName = pkg1_xml.Name{}
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.XMLName)); yyxt5 != nil {
					z.DecExtension(x.XMLName, yyxt5)
				} else {
					z.DecFallback(&x.XMLName, false)
				}
			}
		case "Count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
			}
		case "Cells":
			if r.TryDecodeAsNil() {
				x.Cells = nil
			} else {
				if false {
				} else {
					h.decSlicexlsxMergeCell((*[]xlsxMergeCell)(&x.Cells), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxMergeCells) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.XMLName = pkg1_xml.Name{}
	} else {
		if false {
		} else if yyxt11 := z.Extension(z.I2Rtid(x.XMLName)); yyxt11 != nil {
			z.DecExtension(x.XMLName, yyxt11)
		} else {
			z.DecFallback(&x.XMLName, false)
		}
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Cells = nil
	} else {
		if false {
		} else {
			h.decSlicexlsxMergeCell((*[]xlsxMergeCell)(&x.Cells), d)
		}
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxC) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(6)
			} else {
				r.WriteMapStart(6)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.R))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `R`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.R))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.S))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `S`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.S))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.T))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `T`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.T))
				}
			}
			var yyn12 bool
			if x.F == nil {
				yyn12 = true
				goto LABEL12
			}
		LABEL12:
			if yyr2 || yy2arr2 {
				if yyn12 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.F == nil {
						r.EncodeNil()
					} else {
						x.F.CodecEncodeSelf(e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `F`)
				r.WriteMapElemValue()
				if yyn12 {
					r.EncodeNil()
				} else {
					if x.F == nil {
						r.EncodeNil()
					} else {
						x.F.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.V))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `V`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.V))
				}
			}
			var yyn18 bool
			if x.Is == nil {
				yyn18 = true
				goto LABEL18
			}
		LABEL18:
			if yyr2 || yy2arr2 {
				if yyn18 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Is == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt19 := z.Extension(z.I2Rtid(x.Is)); yyxt19 != nil {
							z.EncExtension(x.Is, yyxt19)
						} else {
							z.EncFallback(x.Is)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Is`)
				r.WriteMapElemValue()
				if yyn18 {
					r.EncodeNil()
				} else {
					if x.Is == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt20 := z.Extension(z.I2Rtid(x.Is)); yyxt20 != nil {
							z.EncExtension(x.Is, yyxt20)
						} else {
							z.EncFallback(x.Is)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxC) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxC) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "R":
			if r.TryDecodeAsNil() {
				x.R = ""
			} else {
				x.R = (string)(r.DecodeString())
			}
		case "S":
			if r.TryDecodeAsNil() {
				x.S = 0
			} else {
				x.S = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
			}
		case "T":
			if r.TryDecodeAsNil() {
				x.T = ""
			} else {
				x.T = (string)(r.DecodeString())
			}
		case "F":
			if r.TryDecodeAsNil() {
				if true && x.F != nil {
					x.F = nil
				}
			} else {
				if x.F == nil {
					x.F = new(xlsxF)
				}

				x.F.CodecDecodeSelf(d)
			}
		case "V":
			if r.TryDecodeAsNil() {
				x.V = ""
			} else {
				x.V = (string)(r.DecodeString())
			}
		case "Is":
			if r.TryDecodeAsNil() {
				if true && x.Is != nil {
					x.Is = nil
				}
			} else {
				if x.Is == nil {
					x.Is = new(xlsxSI)
				}

				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(x.Is)); yyxt10 != nil {
					z.DecExtension(x.Is, yyxt10)
				} else {
					z.DecFallback(x.Is, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxC) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.R = ""
	} else {
		x.R = (string)(r.DecodeString())
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.S = 0
	} else {
		x.S = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.T = ""
	} else {
		x.T = (string)(r.DecodeString())
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.F != nil {
			x.F = nil
		}
	} else {
		if x.F == nil {
			x.F = new(xlsxF)
		}

		x.F.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.V = ""
	} else {
		x.V = (string)(r.DecodeString())
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Is != nil {
			x.Is = nil
		}
	} else {
		if x.Is == nil {
			x.Is = new(xlsxSI)
		}

		if false {
		} else if yyxt18 := z.Extension(z.I2Rtid(x.Is)); yyxt18 != nil {
			z.DecExtension(x.Is, yyxt18)
		} else {
			z.DecFallback(x.Is, false)
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxF) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				r.WriteMapStart(4)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Content))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Content`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Content))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.T))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `T`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.T))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Ref))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Ref`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81, string(x.Ref))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Si))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81, `Si`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Si))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxF) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
		}
	}
}

func (x *xlsxF) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Content":
			if r.TryDecodeAsNil() {
				x.Content = ""
			} else {
				x.Content = (string)(r.DecodeString())
			}
		case "T":
			if r.TryDecodeAsNil() {
				x.T = ""
			} else {
				x.T = (string)(r.DecodeString())
			}
		case "Ref":
			if r.TryDecodeAsNil() {
				x.Ref = ""
			} else {
				x.Ref = (string)(r.DecodeString())
			}
		case "Si":
			if r.TryDecodeAsNil() {
				x.Si = 0
			} else {
				x.Si = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxF) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Content = ""
	} else {
		x.Content = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.T = ""
	} else {
		x.T = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Ref = ""
	} else {
		x.Ref = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Si = 0
	} else {
		x.Si = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize1))
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer1) encSlicexlsxOddHeader(v []xlsxOddHeader, e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer1) decSlicexlsxOddHeader(v *[]xlsxOddHeader, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []xlsxOddHeader{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]xlsxOddHeader, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]xlsxOddHeader, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, xlsxOddHeader{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = xlsxOddHeader{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]xlsxOddHeader, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1) encSlicexlsxOddFooter(v []xlsxOddFooter, e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer1) decSlicexlsxOddFooter(v *[]xlsxOddFooter, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []xlsxOddFooter{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]xlsxOddFooter, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]xlsxOddFooter, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, xlsxOddFooter{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = xlsxOddFooter{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]xlsxOddFooter, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1) encSlicexlsxSheetView(v []xlsxSheetView, e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer1) decSlicexlsxSheetView(v *[]xlsxSheetView, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []xlsxSheetView{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 120)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]xlsxSheetView, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 120)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]xlsxSheetView, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, xlsxSheetView{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = xlsxSheetView{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]xlsxSheetView, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1) encSlicexlsxSelection(v []xlsxSelection, e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer1) decSlicexlsxSelection(v *[]xlsxSelection, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []xlsxSelection{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 56)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]xlsxSelection, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 56)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]xlsxSelection, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, xlsxSelection{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = xlsxSelection{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]xlsxSelection, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1) encSlicexlsxPageSetUpPr(v []xlsxPageSetUpPr, e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer1) decSlicexlsxPageSetUpPr(v *[]xlsxPageSetUpPr, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []xlsxPageSetUpPr{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 1)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]xlsxPageSetUpPr, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 1)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]xlsxPageSetUpPr, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, xlsxPageSetUpPr{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = xlsxPageSetUpPr{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]xlsxPageSetUpPr, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1) encSlicexlsxCol(v []xlsxCol, e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer1) decSlicexlsxCol(v *[]xlsxCol, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []xlsxCol{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 48)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]xlsxCol, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 48)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]xlsxCol, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, xlsxCol{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = xlsxCol{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]xlsxCol, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1) encSlicexlsxRow(v []xlsxRow, e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer1) decSlicexlsxRow(v *[]xlsxRow, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []xlsxRow{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 80)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]xlsxRow, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 80)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]xlsxRow, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, xlsxRow{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = xlsxRow{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]xlsxRow, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1) encSlicexlsxC(v []xlsxC, e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer1) decSlicexlsxC(v *[]xlsxC, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []xlsxC{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 72)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]xlsxC, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 72)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]xlsxC, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, xlsxC{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = xlsxC{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]xlsxC, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1) encSlicexlsxMergeCell(v []xlsxMergeCell, e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer1) decSlicexlsxMergeCell(v *[]xlsxMergeCell, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []xlsxMergeCell{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]xlsxMergeCell, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]xlsxMergeCell, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, xlsxMergeCell{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = xlsxMergeCell{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]xlsxMergeCell, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
