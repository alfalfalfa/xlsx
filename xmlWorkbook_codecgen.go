// Code generated by codecgen - DO NOT EDIT.

package xlsx

import (
	pkg1_xml "encoding/xml"
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF82 = 1
	codecSelferCcRAW2  = 0
	// ----- value types used ----
	codecSelferValueTypeArray2  = 10
	codecSelferValueTypeMap2    = 9
	codecSelferValueTypeString2 = 6
	codecSelferValueTypeInt2    = 2
	codecSelferValueTypeUint2   = 3
	codecSelferValueTypeFloat2  = 4
	codecSelferBitsize2         = uint8(32 << (^uint(0) >> 63))
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct2 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer2 struct{}

func init() {
	if codec1978.GenVersion != 8 {
		_, file, _, _ := runtime.Caller(0)
		panic("codecgen version mismatch: current: 8, need " + strconv.FormatInt(int64(codec1978.GenVersion), 10) + ". Re-generate file: " + file)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg1_xml.Name
		_ = v0
	}
}

func (x *xlsxWorkbookRels) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				r.WriteMapStart(2)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.XMLName
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(yy4)); yyxt5 != nil {
					z.EncExtension(yy4, yyxt5)
				} else {
					z.EncFallback(yy4)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `XMLName`)
				r.WriteMapElemValue()
				yy6 := &x.XMLName
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(yy6)); yyxt7 != nil {
					z.EncExtension(yy6, yyxt7)
				} else {
					z.EncFallback(yy6)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Relationships == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxWorkbookRelation(([]xlsxWorkbookRelation)(x.Relationships), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `Relationships`)
				r.WriteMapElemValue()
				if x.Relationships == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxWorkbookRelation(([]xlsxWorkbookRelation)(x.Relationships), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxWorkbookRels) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
		}
	}
}

func (x *xlsxWorkbookRels) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "XMLName":
			if r.TryDecodeAsNil() {
				x.XMLName = pkg1_xml.Name{}
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.XMLName)); yyxt5 != nil {
					z.DecExtension(x.XMLName, yyxt5)
				} else {
					z.DecFallback(&x.XMLName, false)
				}
			}
		case "Relationships":
			if r.TryDecodeAsNil() {
				x.Relationships = nil
			} else {
				if false {
				} else {
					h.decSlicexlsxWorkbookRelation((*[]xlsxWorkbookRelation)(&x.Relationships), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxWorkbookRels) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.XMLName = pkg1_xml.Name{}
	} else {
		if false {
		} else if yyxt10 := z.Extension(z.I2Rtid(x.XMLName)); yyxt10 != nil {
			z.DecExtension(x.XMLName, yyxt10)
		} else {
			z.DecFallback(&x.XMLName, false)
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Relationships = nil
	} else {
		if false {
		} else {
			h.decSlicexlsxWorkbookRelation((*[]xlsxWorkbookRelation)(&x.Relationships), d)
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxWorkbookRelation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				r.WriteMapStart(3)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Id))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `Id`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Id))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Target))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `Target`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Target))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Type))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `Type`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxWorkbookRelation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
		}
	}
}

func (x *xlsxWorkbookRelation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Id":
			if r.TryDecodeAsNil() {
				x.Id = ""
			} else {
				x.Id = (string)(r.DecodeString())
			}
		case "Target":
			if r.TryDecodeAsNil() {
				x.Target = ""
			} else {
				x.Target = (string)(r.DecodeString())
			}
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxWorkbookRelation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Id = ""
	} else {
		x.Id = (string)(r.DecodeString())
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Target = ""
	} else {
		x.Target = (string)(r.DecodeString())
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = (string)(r.DecodeString())
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxWorkbook) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(8)
			} else {
				r.WriteMapStart(8)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.XMLName
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(yy4)); yyxt5 != nil {
					z.EncExtension(yy4, yyxt5)
				} else {
					z.EncFallback(yy4)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `XMLName`)
				r.WriteMapElemValue()
				yy6 := &x.XMLName
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(yy6)); yyxt7 != nil {
					z.EncExtension(yy6, yyxt7)
				} else {
					z.EncFallback(yy6)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy9 := &x.FileVersion
				yy9.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `FileVersion`)
				r.WriteMapElemValue()
				yy11 := &x.FileVersion
				yy11.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy14 := &x.WorkbookPr
				yy14.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `WorkbookPr`)
				r.WriteMapElemValue()
				yy16 := &x.WorkbookPr
				yy16.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy19 := &x.WorkbookProtection
				yy19.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `WorkbookProtection`)
				r.WriteMapElemValue()
				yy21 := &x.WorkbookProtection
				yy21.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy24 := &x.BookViews
				yy24.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `BookViews`)
				r.WriteMapElemValue()
				yy26 := &x.BookViews
				yy26.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy29 := &x.Sheets
				yy29.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `Sheets`)
				r.WriteMapElemValue()
				yy31 := &x.Sheets
				yy31.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy34 := &x.DefinedNames
				yy34.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `DefinedNames`)
				r.WriteMapElemValue()
				yy36 := &x.DefinedNames
				yy36.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy39 := &x.CalcPr
				yy39.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `CalcPr`)
				r.WriteMapElemValue()
				yy41 := &x.CalcPr
				yy41.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxWorkbook) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
		}
	}
}

func (x *xlsxWorkbook) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "XMLName":
			if r.TryDecodeAsNil() {
				x.XMLName = pkg1_xml.Name{}
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.XMLName)); yyxt5 != nil {
					z.DecExtension(x.XMLName, yyxt5)
				} else {
					z.DecFallback(&x.XMLName, false)
				}
			}
		case "FileVersion":
			if r.TryDecodeAsNil() {
				x.FileVersion = xlsxFileVersion{}
			} else {
				x.FileVersion.CodecDecodeSelf(d)
			}
		case "WorkbookPr":
			if r.TryDecodeAsNil() {
				x.WorkbookPr = xlsxWorkbookPr{}
			} else {
				x.WorkbookPr.CodecDecodeSelf(d)
			}
		case "WorkbookProtection":
			if r.TryDecodeAsNil() {
				x.WorkbookProtection = xlsxWorkbookProtection{}
			} else {
				x.WorkbookProtection.CodecDecodeSelf(d)
			}
		case "BookViews":
			if r.TryDecodeAsNil() {
				x.BookViews = xlsxBookViews{}
			} else {
				x.BookViews.CodecDecodeSelf(d)
			}
		case "Sheets":
			if r.TryDecodeAsNil() {
				x.Sheets = xlsxSheets{}
			} else {
				x.Sheets.CodecDecodeSelf(d)
			}
		case "DefinedNames":
			if r.TryDecodeAsNil() {
				x.DefinedNames = xlsxDefinedNames{}
			} else {
				x.DefinedNames.CodecDecodeSelf(d)
			}
		case "CalcPr":
			if r.TryDecodeAsNil() {
				x.CalcPr = xlsxCalcPr{}
			} else {
				x.CalcPr.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxWorkbook) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj13 int
	var yyb13 bool
	var yyhl13 bool = l >= 0
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.XMLName = pkg1_xml.Name{}
	} else {
		if false {
		} else if yyxt15 := z.Extension(z.I2Rtid(x.XMLName)); yyxt15 != nil {
			z.DecExtension(x.XMLName, yyxt15)
		} else {
			z.DecFallback(&x.XMLName, false)
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FileVersion = xlsxFileVersion{}
	} else {
		x.FileVersion.CodecDecodeSelf(d)
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.WorkbookPr = xlsxWorkbookPr{}
	} else {
		x.WorkbookPr.CodecDecodeSelf(d)
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.WorkbookProtection = xlsxWorkbookProtection{}
	} else {
		x.WorkbookProtection.CodecDecodeSelf(d)
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.BookViews = xlsxBookViews{}
	} else {
		x.BookViews.CodecDecodeSelf(d)
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Sheets = xlsxSheets{}
	} else {
		x.Sheets.CodecDecodeSelf(d)
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.DefinedNames = xlsxDefinedNames{}
	} else {
		x.DefinedNames.CodecDecodeSelf(d)
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.CalcPr = xlsxCalcPr{}
	} else {
		x.CalcPr.CodecDecodeSelf(d)
	}
	for {
		yyj13++
		if yyhl13 {
			yyb13 = yyj13 > l
		} else {
			yyb13 = r.CheckBreak()
		}
		if yyb13 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj13-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxWorkbookProtection) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(0)
			} else {
				r.WriteMapStart(0)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxWorkbookProtection) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
		}
	}
}

func (x *xlsxWorkbookProtection) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxWorkbookProtection) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxFileVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				r.WriteMapStart(4)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.AppName))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `AppName`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.AppName))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.LastEdited))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `LastEdited`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.LastEdited))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.LowestEdited))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `LowestEdited`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.LowestEdited))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.RupBuild))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `RupBuild`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.RupBuild))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxFileVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
		}
	}
}

func (x *xlsxFileVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "AppName":
			if r.TryDecodeAsNil() {
				x.AppName = ""
			} else {
				x.AppName = (string)(r.DecodeString())
			}
		case "LastEdited":
			if r.TryDecodeAsNil() {
				x.LastEdited = ""
			} else {
				x.LastEdited = (string)(r.DecodeString())
			}
		case "LowestEdited":
			if r.TryDecodeAsNil() {
				x.LowestEdited = ""
			} else {
				x.LowestEdited = (string)(r.DecodeString())
			}
		case "RupBuild":
			if r.TryDecodeAsNil() {
				x.RupBuild = ""
			} else {
				x.RupBuild = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxFileVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.AppName = ""
	} else {
		x.AppName = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.LastEdited = ""
	} else {
		x.LastEdited = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.LowestEdited = ""
	} else {
		x.LowestEdited = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.RupBuild = ""
	} else {
		x.RupBuild = (string)(r.DecodeString())
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxWorkbookPr) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				r.WriteMapStart(4)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.DefaultThemeVersion))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `DefaultThemeVersion`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.DefaultThemeVersion))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.BackupFile))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `BackupFile`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.BackupFile))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.ShowObjects))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `ShowObjects`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.ShowObjects))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.Date1904))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `Date1904`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.Date1904))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxWorkbookPr) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
		}
	}
}

func (x *xlsxWorkbookPr) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "DefaultThemeVersion":
			if r.TryDecodeAsNil() {
				x.DefaultThemeVersion = ""
			} else {
				x.DefaultThemeVersion = (string)(r.DecodeString())
			}
		case "BackupFile":
			if r.TryDecodeAsNil() {
				x.BackupFile = false
			} else {
				x.BackupFile = (bool)(r.DecodeBool())
			}
		case "ShowObjects":
			if r.TryDecodeAsNil() {
				x.ShowObjects = ""
			} else {
				x.ShowObjects = (string)(r.DecodeString())
			}
		case "Date1904":
			if r.TryDecodeAsNil() {
				x.Date1904 = false
			} else {
				x.Date1904 = (bool)(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxWorkbookPr) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.DefaultThemeVersion = ""
	} else {
		x.DefaultThemeVersion = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.BackupFile = false
	} else {
		x.BackupFile = (bool)(r.DecodeBool())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ShowObjects = ""
	} else {
		x.ShowObjects = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Date1904 = false
	} else {
		x.Date1904 = (bool)(r.DecodeBool())
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxBookViews) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.WorkBookView == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxWorkBookView(([]xlsxWorkBookView)(x.WorkBookView), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `WorkBookView`)
				r.WriteMapElemValue()
				if x.WorkBookView == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxWorkBookView(([]xlsxWorkBookView)(x.WorkBookView), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxBookViews) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
		}
	}
}

func (x *xlsxBookViews) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "WorkBookView":
			if r.TryDecodeAsNil() {
				x.WorkBookView = nil
			} else {
				if false {
				} else {
					h.decSlicexlsxWorkBookView((*[]xlsxWorkBookView)(&x.WorkBookView), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxBookViews) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.WorkBookView = nil
	} else {
		if false {
		} else {
			h.decSlicexlsxWorkBookView((*[]xlsxWorkBookView)(&x.WorkBookView), d)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxWorkBookView) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(10)
			} else {
				r.WriteMapStart(10)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.ActiveTab))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `ActiveTab`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.ActiveTab))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.FirstSheet))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `FirstSheet`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.FirstSheet))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.ShowHorizontalScroll))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `ShowHorizontalScroll`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.ShowHorizontalScroll))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.ShowVerticalScroll))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `ShowVerticalScroll`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.ShowVerticalScroll))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.ShowSheetTabs))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `ShowSheetTabs`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.ShowSheetTabs))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.TabRatio))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `TabRatio`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.TabRatio))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.WindowHeight))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `WindowHeight`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.WindowHeight))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.WindowWidth))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `WindowWidth`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.WindowWidth))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.XWindow))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `XWindow`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.XWindow))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.YWindow))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `YWindow`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.YWindow))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxWorkBookView) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
		}
	}
}

func (x *xlsxWorkBookView) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "ActiveTab":
			if r.TryDecodeAsNil() {
				x.ActiveTab = 0
			} else {
				x.ActiveTab = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2))
			}
		case "FirstSheet":
			if r.TryDecodeAsNil() {
				x.FirstSheet = 0
			} else {
				x.FirstSheet = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2))
			}
		case "ShowHorizontalScroll":
			if r.TryDecodeAsNil() {
				x.ShowHorizontalScroll = false
			} else {
				x.ShowHorizontalScroll = (bool)(r.DecodeBool())
			}
		case "ShowVerticalScroll":
			if r.TryDecodeAsNil() {
				x.ShowVerticalScroll = false
			} else {
				x.ShowVerticalScroll = (bool)(r.DecodeBool())
			}
		case "ShowSheetTabs":
			if r.TryDecodeAsNil() {
				x.ShowSheetTabs = false
			} else {
				x.ShowSheetTabs = (bool)(r.DecodeBool())
			}
		case "TabRatio":
			if r.TryDecodeAsNil() {
				x.TabRatio = 0
			} else {
				x.TabRatio = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2))
			}
		case "WindowHeight":
			if r.TryDecodeAsNil() {
				x.WindowHeight = 0
			} else {
				x.WindowHeight = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2))
			}
		case "WindowWidth":
			if r.TryDecodeAsNil() {
				x.WindowWidth = 0
			} else {
				x.WindowWidth = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2))
			}
		case "XWindow":
			if r.TryDecodeAsNil() {
				x.XWindow = ""
			} else {
				x.XWindow = (string)(r.DecodeString())
			}
		case "YWindow":
			if r.TryDecodeAsNil() {
				x.YWindow = ""
			} else {
				x.YWindow = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxWorkBookView) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ActiveTab = 0
	} else {
		x.ActiveTab = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2))
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FirstSheet = 0
	} else {
		x.FirstSheet = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2))
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ShowHorizontalScroll = false
	} else {
		x.ShowHorizontalScroll = (bool)(r.DecodeBool())
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ShowVerticalScroll = false
	} else {
		x.ShowVerticalScroll = (bool)(r.DecodeBool())
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ShowSheetTabs = false
	} else {
		x.ShowSheetTabs = (bool)(r.DecodeBool())
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TabRatio = 0
	} else {
		x.TabRatio = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2))
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.WindowHeight = 0
	} else {
		x.WindowHeight = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2))
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.WindowWidth = 0
	} else {
		x.WindowWidth = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2))
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.XWindow = ""
	} else {
		x.XWindow = (string)(r.DecodeString())
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.YWindow = ""
	} else {
		x.YWindow = (string)(r.DecodeString())
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxSheets) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Sheet == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxSheet(([]xlsxSheet)(x.Sheet), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `Sheet`)
				r.WriteMapElemValue()
				if x.Sheet == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxSheet(([]xlsxSheet)(x.Sheet), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxSheets) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
		}
	}
}

func (x *xlsxSheets) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Sheet":
			if r.TryDecodeAsNil() {
				x.Sheet = nil
			} else {
				if false {
				} else {
					h.decSlicexlsxSheet((*[]xlsxSheet)(&x.Sheet), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxSheets) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Sheet = nil
	} else {
		if false {
		} else {
			h.decSlicexlsxSheet((*[]xlsxSheet)(&x.Sheet), d)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxSheet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				r.WriteMapStart(4)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Name))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `Name`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.SheetId))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `SheetId`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.SheetId))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Id))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `Id`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Id))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.State))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `State`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.State))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxSheet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
		}
	}
}

func (x *xlsxSheet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = (string)(r.DecodeString())
			}
		case "SheetId":
			if r.TryDecodeAsNil() {
				x.SheetId = ""
			} else {
				x.SheetId = (string)(r.DecodeString())
			}
		case "Id":
			if r.TryDecodeAsNil() {
				x.Id = ""
			} else {
				x.Id = (string)(r.DecodeString())
			}
		case "State":
			if r.TryDecodeAsNil() {
				x.State = ""
			} else {
				x.State = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxSheet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.SheetId = ""
	} else {
		x.SheetId = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Id = ""
	} else {
		x.Id = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.State = ""
	} else {
		x.State = (string)(r.DecodeString())
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxDefinedNames) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.DefinedName == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxDefinedName(([]xlsxDefinedName)(x.DefinedName), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `DefinedName`)
				r.WriteMapElemValue()
				if x.DefinedName == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicexlsxDefinedName(([]xlsxDefinedName)(x.DefinedName), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxDefinedNames) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
		}
	}
}

func (x *xlsxDefinedNames) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "DefinedName":
			if r.TryDecodeAsNil() {
				x.DefinedName = nil
			} else {
				if false {
				} else {
					h.decSlicexlsxDefinedName((*[]xlsxDefinedName)(&x.DefinedName), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxDefinedNames) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.DefinedName = nil
	} else {
		if false {
		} else {
			h.decSlicexlsxDefinedName((*[]xlsxDefinedName)(&x.DefinedName), d)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxDefinedName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(16)
			} else {
				r.WriteMapStart(16)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Data))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `Data`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Data))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Name))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `Name`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Comment))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `Comment`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Comment))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.CustomMenu))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `CustomMenu`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.CustomMenu))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Description))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `Description`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Description))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Help))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `Help`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.Help))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.ShortcutKey))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `ShortcutKey`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.ShortcutKey))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.StatusBar))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `StatusBar`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.StatusBar))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.LocalSheetID))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `LocalSheetID`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.LocalSheetID))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.FunctionGroupID))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `FunctionGroupID`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.FunctionGroupID))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.Function))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `Function`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.Function))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.Hidden))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `Hidden`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.Hidden))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.VbProcedure))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `VbProcedure`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.VbProcedure))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.PublishToServer))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `PublishToServer`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.PublishToServer))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.WorkbookParameter))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `WorkbookParameter`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.WorkbookParameter))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.Xlm))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `Xlm`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.Xlm))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxDefinedName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
		}
	}
}

func (x *xlsxDefinedName) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Data":
			if r.TryDecodeAsNil() {
				x.Data = ""
			} else {
				x.Data = (string)(r.DecodeString())
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = (string)(r.DecodeString())
			}
		case "Comment":
			if r.TryDecodeAsNil() {
				x.Comment = ""
			} else {
				x.Comment = (string)(r.DecodeString())
			}
		case "CustomMenu":
			if r.TryDecodeAsNil() {
				x.CustomMenu = ""
			} else {
				x.CustomMenu = (string)(r.DecodeString())
			}
		case "Description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = (string)(r.DecodeString())
			}
		case "Help":
			if r.TryDecodeAsNil() {
				x.Help = ""
			} else {
				x.Help = (string)(r.DecodeString())
			}
		case "ShortcutKey":
			if r.TryDecodeAsNil() {
				x.ShortcutKey = ""
			} else {
				x.ShortcutKey = (string)(r.DecodeString())
			}
		case "StatusBar":
			if r.TryDecodeAsNil() {
				x.StatusBar = ""
			} else {
				x.StatusBar = (string)(r.DecodeString())
			}
		case "LocalSheetID":
			if r.TryDecodeAsNil() {
				x.LocalSheetID = 0
			} else {
				x.LocalSheetID = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2))
			}
		case "FunctionGroupID":
			if r.TryDecodeAsNil() {
				x.FunctionGroupID = 0
			} else {
				x.FunctionGroupID = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2))
			}
		case "Function":
			if r.TryDecodeAsNil() {
				x.Function = false
			} else {
				x.Function = (bool)(r.DecodeBool())
			}
		case "Hidden":
			if r.TryDecodeAsNil() {
				x.Hidden = false
			} else {
				x.Hidden = (bool)(r.DecodeBool())
			}
		case "VbProcedure":
			if r.TryDecodeAsNil() {
				x.VbProcedure = false
			} else {
				x.VbProcedure = (bool)(r.DecodeBool())
			}
		case "PublishToServer":
			if r.TryDecodeAsNil() {
				x.PublishToServer = false
			} else {
				x.PublishToServer = (bool)(r.DecodeBool())
			}
		case "WorkbookParameter":
			if r.TryDecodeAsNil() {
				x.WorkbookParameter = false
			} else {
				x.WorkbookParameter = (bool)(r.DecodeBool())
			}
		case "Xlm":
			if r.TryDecodeAsNil() {
				x.Xlm = false
			} else {
				x.Xlm = (bool)(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxDefinedName) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj20 int
	var yyb20 bool
	var yyhl20 bool = l >= 0
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Data = ""
	} else {
		x.Data = (string)(r.DecodeString())
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = (string)(r.DecodeString())
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Comment = ""
	} else {
		x.Comment = (string)(r.DecodeString())
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.CustomMenu = ""
	} else {
		x.CustomMenu = (string)(r.DecodeString())
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = (string)(r.DecodeString())
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Help = ""
	} else {
		x.Help = (string)(r.DecodeString())
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ShortcutKey = ""
	} else {
		x.ShortcutKey = (string)(r.DecodeString())
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.StatusBar = ""
	} else {
		x.StatusBar = (string)(r.DecodeString())
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.LocalSheetID = 0
	} else {
		x.LocalSheetID = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2))
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FunctionGroupID = 0
	} else {
		x.FunctionGroupID = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2))
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Function = false
	} else {
		x.Function = (bool)(r.DecodeBool())
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Hidden = false
	} else {
		x.Hidden = (bool)(r.DecodeBool())
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.VbProcedure = false
	} else {
		x.VbProcedure = (bool)(r.DecodeBool())
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PublishToServer = false
	} else {
		x.PublishToServer = (bool)(r.DecodeBool())
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.WorkbookParameter = false
	} else {
		x.WorkbookParameter = (bool)(r.DecodeBool())
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Xlm = false
	} else {
		x.Xlm = (bool)(r.DecodeBool())
	}
	for {
		yyj20++
		if yyhl20 {
			yyb20 = yyj20 > l
		} else {
			yyb20 = r.CheckBreak()
		}
		if yyb20 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj20-1, "")
	}
	r.ReadArrayEnd()
}

func (x *xlsxCalcPr) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				r.WriteMapStart(5)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.CalcId))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `CalcId`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.CalcId))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.IterateCount))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `IterateCount`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.IterateCount))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.RefMode))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `RefMode`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82, string(x.RefMode))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.Iterate))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `Iterate`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.Iterate))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat64(float64(x.IterateDelta))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF82, `IterateDelta`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat64(float64(x.IterateDelta))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *xlsxCalcPr) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
		}
	}
}

func (x *xlsxCalcPr) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "CalcId":
			if r.TryDecodeAsNil() {
				x.CalcId = ""
			} else {
				x.CalcId = (string)(r.DecodeString())
			}
		case "IterateCount":
			if r.TryDecodeAsNil() {
				x.IterateCount = 0
			} else {
				x.IterateCount = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2))
			}
		case "RefMode":
			if r.TryDecodeAsNil() {
				x.RefMode = ""
			} else {
				x.RefMode = (string)(r.DecodeString())
			}
		case "Iterate":
			if r.TryDecodeAsNil() {
				x.Iterate = false
			} else {
				x.Iterate = (bool)(r.DecodeBool())
			}
		case "IterateDelta":
			if r.TryDecodeAsNil() {
				x.IterateDelta = 0
			} else {
				x.IterateDelta = (float64)(r.DecodeFloat64())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *xlsxCalcPr) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.CalcId = ""
	} else {
		x.CalcId = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.IterateCount = 0
	} else {
		x.IterateCount = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2))
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.RefMode = ""
	} else {
		x.RefMode = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Iterate = false
	} else {
		x.Iterate = (bool)(r.DecodeBool())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.IterateDelta = 0
	} else {
		x.IterateDelta = (float64)(r.DecodeFloat64())
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer2) encSlicexlsxWorkbookRelation(v []xlsxWorkbookRelation, e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer2) decSlicexlsxWorkbookRelation(v *[]xlsxWorkbookRelation, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []xlsxWorkbookRelation{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 48)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]xlsxWorkbookRelation, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 48)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]xlsxWorkbookRelation, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, xlsxWorkbookRelation{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = xlsxWorkbookRelation{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]xlsxWorkbookRelation, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer2) encSlicexlsxWorkBookView(v []xlsxWorkBookView, e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer2) decSlicexlsxWorkBookView(v *[]xlsxWorkBookView, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []xlsxWorkBookView{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 80)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]xlsxWorkBookView, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 80)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]xlsxWorkBookView, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, xlsxWorkBookView{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = xlsxWorkBookView{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]xlsxWorkBookView, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer2) encSlicexlsxSheet(v []xlsxSheet, e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer2) decSlicexlsxSheet(v *[]xlsxSheet, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []xlsxSheet{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 64)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]xlsxSheet, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 64)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]xlsxSheet, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, xlsxSheet{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = xlsxSheet{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]xlsxSheet, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer2) encSlicexlsxDefinedName(v []xlsxDefinedName, e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer2) decSlicexlsxDefinedName(v *[]xlsxDefinedName, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []xlsxDefinedName{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 152)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]xlsxDefinedName, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 152)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]xlsxDefinedName, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, xlsxDefinedName{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = xlsxDefinedName{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]xlsxDefinedName, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
